x, y, time
)
# calculating estimated survival
newdata.2d$survival = sm.coxph(formula = Surv(time) ~ x + y,
data = sjosmooth.2d,
lambda = 1,
newdata = newdata.2d,
type = "survival")
# plotting the estimated survival
est.surv = newdata.2d %>%
select(x, y, survival) %>%
spread(y, survival) %>%
select(-x) %>%
plot_ly(z = ~ as.matrix(.),
x = newdata.seq,
y = newdata.seq) %>%
add_surface(showscale=FALSE)  %>%
layout(title = "Estimated Survival")
est.surv
true.surv
n = 100
data.seq = seq(from = 0, to = 1, length.out = n)
set.seed(564)
sjosmooth.2d = complete(
tibble(x = data.seq,
y = data.seq),
x, y
)
# simulating the time to event outcome assuming a correct Cox model
sjosmooth.2d = mutate(sjosmooth.2d,
xb = 2*(x - 0.5)^2 + 2*(y - 0.5)^2,
time = -log(runif(n, 0, 1)) * exp(-xb),
# getting the true survival probabilites at time 1 using x
survt1 = exp(-exp(xb)))
# plotting true survival
true.surv = sjosmooth.2d %>%
select(x, y, survt1) %>%
spread(y, survt1) %>%
select(-x) %>%
plot_ly(z = ~ as.matrix(.),
x = data.seq,
y = data.seq) %>%
add_surface(showscale=FALSE) %>%
layout(title = "True Survival")
true.surv
newdata.seq = seq(0.05, 0.95, by = 0.15)
newdata.2d = complete(
tibble(x = newdata.seq,
y = newdata.seq,
time = 1),
x, y, time
)
newdata.2d
newdata.seq = seq(0.05, 0.95, by = 0.10)
newdata.2d = complete(
tibble(x = newdata.seq,
y = newdata.seq,
time = 1),
x, y, time
)
newdata.2d
n = 90
data.seq = seq(from = 0, to = 1, length.out = n)
set.seed(564)
sjosmooth.2d = complete(
tibble(x = data.seq,
y = data.seq),
x, y
)
# simulating the time to event outcome assuming a correct Cox model
sjosmooth.2d = mutate(sjosmooth.2d,
xb = 2*(x - 0.5)^2 + 2*(y - 0.5)^2,
time = -log(runif(n, 0, 1)) * exp(-xb),
# getting the true survival probabilites at time 1 using x
survt1 = exp(-exp(xb)))
# plotting true survival
true.surv = sjosmooth.2d %>%
select(x, y, survt1) %>%
spread(y, survt1) %>%
select(-x) %>%
plot_ly(z = ~ as.matrix(.),
x = data.seq,
y = data.seq) %>%
add_surface(showscale=FALSE) %>%
layout(title = "True Survival")
true.surv
newdata.seq = seq(0.05, 0.95, by = 0.10)
newdata.2d = complete(
tibble(x = newdata.seq,
y = newdata.seq,
time = 1),
x, y, time
)
# calculating estimated survival
newdata.2d$survival = sm.coxph(formula = Surv(time) ~ x + y,
data = sjosmooth.2d,
lambda = 1,
newdata = newdata.2d,
type = "survival")
newdata.seq = seq(0.05, 0.95, length.out = 9)
newdata.2d = complete(
tibble(x = newdata.seq,
y = newdata.seq,
time = 1),
x, y, time
)
# calculating estimated survival
newdata.2d$survival = sm.coxph(formula = Surv(time) ~ x + y,
data = sjosmooth.2d,
lambda = 1,
newdata = newdata.2d,
type = "survival")
# plotting the estimated survival
est.surv = newdata.2d %>%
select(x, y, survival) %>%
spread(y, survival) %>%
select(-x) %>%
plot_ly(z = ~ as.matrix(.),
x = newdata.seq,
y = newdata.seq) %>%
add_surface(showscale=FALSE)  %>%
layout(title = "Estimated Survival")
est.surv
newdata.2d
unique(newdata.2d[c("x","y")])
est.surv
est.surv
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(ggplot2)
library(tidyverse)
library(ggplot2)
library(plotly)
library(sjosmooth)
library(survival)
# generating x first, then we will simualte the outcome
n = 1500
set.seed(568)
sjosmooth = tibble(x = seq(from = 0, to = 1, length.out = n))
# simulating the time to event outcome assuming a correct Cox model
sjosmooth = mutate(sjosmooth,
xb = x,
time = -log(runif(n, 0, 1)) * exp(-xb),
# getting the true survival probabilites at time 1 using x
survt1 = exp(-exp(xb)))
mod = coxph(Surv(time) ~ x, data = sjosmooth)
summary(mod)
# perform the kernal smoothing
newdata = tibble(x = seq(0, 1, by = 0.05),
time = 1)
newdata$survival = sm.coxph(formula = Surv(time) ~ x,
data = sjosmooth,
lambda = 0.3,
newdata = newdata,
type = "survival")
# plotting the true and estimated survival functions.
ggplot() +
geom_line(data = newdata,   aes(y = survival,  x = x)) +
geom_line(data = sjosmooth, aes(y = survt1,  x = x), linetype = "dashed") +
scale_y_continuous(limits = c(0,1))
# generating predictor variables, x
n = 1500
set.seed(568)
sjosmooth = tibble(x = seq(from = 0, to = 1, length.out = n))
# simulating the time to event outcome assuming a correct Cox model
sjosmooth = mutate(sjosmooth,
xb = 12*(x - 0.5)^3,
time = -log(runif(n, 0, 1)) * exp(-xb),
# getting the true survival probabilites at time 1 using x
survt1 = exp(-exp(xb)))
# perform the kernal smoothing
newdata = tibble(x = seq(0, 1, by = 0.05),
time = 1)
newdata$survival = sm.coxph(formula = Surv(time) ~ x,
data = sjosmooth,
lambda = 0.3,
newdata = newdata,
type = "survival")
# plotting the true and estiamted survival functions.
ggplot() +
geom_line(data = newdata,   aes(y = survival,  x = x)) +
geom_line(data = sjosmooth, aes(y = survt1,  x = x), linetype = "dashed") +
scale_y_continuous(limits = c(0,1))
# perform the kernal smoothing for each of the lambdas
lambda = c(0.05, 0.3, 1, 10)
newdata = tibble(x = seq(0, 1, by = 0.05),
time = 1)
# output is a list, with each element the output for sm.coxph for each of the lambda values
est0 = map(lambda, ~ bind_cols(newdata,
survival = sm.coxph(formula = Surv(time) ~ x,
data = sjosmooth,
lambda = .x,
newdata = newdata,
type = "survival")))
# adding the lambda parameter to the list of tibble results
est.n = nrow(est0[[1]])
est = map2(est0, lambda, ~ bind_cols(.x, tibble(lambda = rep(.y, est.n)))) %>%
# appending the results into a single tibble
bind_rows(.)
# plotting results
ggplot() +
geom_line(data = est, aes(y = survival, x = x, color = as.factor(lambda))) +
geom_line(data = sjosmooth, aes(y = survt1,  x = x), linetype = "dashed") +
labs(color = expression(lambda)) +
scale_y_continuous(limits = c(0,1)) +
theme(legend.position = c(0.9, 0.81))
# generating predictor variables, x
n = 100
data.seq = seq(from = 0, to = 1, length.out = n)
set.seed(564)
sjosmooth.2d = complete(
tibble(x = data.seq,
y = data.seq),
x, y
)
# simulating the time to event outcome assuming a correct Cox model
sjosmooth.2d = mutate(sjosmooth.2d,
xb = 2*(x - 0.5)^2 + 2*(y - 0.5)^2,
time = -log(runif(n, 0, 1)) * exp(-xb),
# getting the true survival probabilites at time 1 using x
survt1 = exp(-exp(xb)))
# plotting true survival
true.surv = sjosmooth.2d %>%
select(x, y, survt1) %>%
spread(y, survt1) %>%
select(-x) %>%
plot_ly(z = ~ as.matrix(.),
x = data.seq,
y = data.seq) %>%
add_surface(showscale=FALSE) %>%
layout(title = "True Survival")
true.surv
# generating new data to perform estiamtion on
newdata.seq = seq(0.05, 0.95, length.out = 10)
newdata.2d = complete(
tibble(x = newdata.seq,
y = newdata.seq,
time = 1),
x, y, time
)
# calculating estimated survival
newdata.2d$survival = sm.coxph(formula = Surv(time) ~ x + y,
data = sjosmooth.2d,
lambda = 1,
newdata = newdata.2d,
type = "survival")
# plotting the estimated survival
est.surv = newdata.2d %>%
select(x, y, survival) %>%
spread(y, survival) %>%
select(-x) %>%
plot_ly(z = ~ as.matrix(.),
x = newdata.seq,
y = newdata.seq) %>%
add_surface(showscale=FALSE)  %>%
layout(title = "Estimated Survival")
est.surv
est.surv
sd(sjosmooth.2d$x)
# generating new data to perform estiamtion on
newdata.seq = seq(0.05, 0.95, length.out = 10)
newdata.2d = complete(
tibble(x = newdata.seq,
y = newdata.seq,
time = 1),
x, y, time
)
# calculating estimated survival
newdata.2d$survival = sm.coxph(formula = Surv(time) ~ x + y,
data = sjosmooth.2d,
lambda = 1.5,
newdata = newdata.2d,
type = "survival")
# generating new data to perform estiamtion on
newdata.seq = seq(0.05, 0.95, length.out = 10)
newdata.2d = complete(
tibble(x = newdata.seq,
y = newdata.seq,
time = 1),
x, y, time
)
# calculating estimated survival
newdata.2d$survival = sm.coxph(formula = Surv(time) ~ x + y,
data = sjosmooth.2d,
lambda = 1.5,
newdata = newdata.2d,
type = "survival")
# plotting the estimated survival
est.surv = newdata.2d %>%
select(x, y, survival) %>%
spread(y, survival) %>%
select(-x) %>%
plot_ly(z = ~ as.matrix(.),
x = newdata.seq,
y = newdata.seq) %>%
add_surface(showscale=FALSE)  %>%
layout(title = "Estimated Survival")
est.surv
est.surv
newdata.seq = seq(0.05, 0.95, length.out = 15)
newdata.2d = complete(
tibble(x = newdata.seq,
y = newdata.seq,
time = 1),
x, y, time
)
# calculating estimated survival
newdata.2d$survival = sm.coxph(formula = Surv(time) ~ x + y,
data = sjosmooth.2d,
lambda = 0.5,
newdata = newdata.2d,
type = "survival")
# plotting the estimated survival
est.surv = newdata.2d %>%
select(x, y, survival) %>%
spread(y, survival) %>%
select(-x) %>%
plot_ly(z = ~ as.matrix(.),
x = newdata.seq,
y = newdata.seq) %>%
add_surface(showscale=FALSE)  %>%
layout(title = "Estimated Survival")
est.surv
est.surv
# generating new data to perform estiamtion on
newdata.seq = seq(0.05, 0.95, length.out = 10)
newdata.2d = complete(
tibble(x = newdata.seq,
y = newdata.seq,
time = 1),
x, y, time
)
# calculating estimated survival
newdata.2d$survival = sm.coxph(formula = Surv(time) ~ x + y,
data = sjosmooth.2d,
lambda = 1.2,
newdata = newdata.2d,
type = "survival")
# plotting the estimated survival
est.surv = newdata.2d %>%
select(x, y, survival) %>%
spread(y, survival) %>%
select(-x) %>%
plot_ly(z = ~ as.matrix(.),
x = newdata.seq,
y = newdata.seq) %>%
add_surface(showscale=FALSE)  %>%
layout(title = "Estimated Survival")
est.surv
est.surv
# calculating estimated survival
newdata.2d$pred.lp = sm.coxph(formula = Surv(time) ~ x + y,
data = sjosmooth.2d,
lambda = 1.2,
newdata = newdata.2d,
type = "lp")
library(sjosmooth)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(ggplot2)
library(tidyverse)
library(ggplot2)
library(plotly)
library(sjosmooth)
library(survival)
# generating x first, then we will simualte the outcome
n = 1500
set.seed(568)
sjosmooth = tibble(x = seq(from = 0, to = 1, length.out = n))
# simulating the time to event outcome assuming a correct Cox model
sjosmooth = mutate(sjosmooth,
xb = x,
time = -log(runif(n, 0, 1)) * exp(-xb),
# getting the true survival probabilites at time 1 using x
survt1 = exp(-exp(xb)))
mod = coxph(Surv(time) ~ x, data = sjosmooth)
summary(mod)
# perform the kernal smoothing
newdata = tibble(x = seq(0, 1, by = 0.05),
time = 1)
newdata$survival = sm.coxph(formula = Surv(time) ~ x,
data = sjosmooth,
lambda = 0.3,
newdata = newdata,
type = "survival")
# plotting the true and estimated survival functions.
ggplot() +
geom_line(data = newdata,   aes(y = survival,  x = x)) +
geom_line(data = sjosmooth, aes(y = survt1,  x = x), linetype = "dashed") +
scale_y_continuous(limits = c(0,1))
# generating predictor variables, x
n = 1500
set.seed(568)
sjosmooth = tibble(x = seq(from = 0, to = 1, length.out = n))
# simulating the time to event outcome assuming a correct Cox model
sjosmooth = mutate(sjosmooth,
xb = 12*(x - 0.5)^3,
time = -log(runif(n, 0, 1)) * exp(-xb),
# getting the true survival probabilites at time 1 using x
survt1 = exp(-exp(xb)))
# perform the kernal smoothing
newdata = tibble(x = seq(0, 1, by = 0.05),
time = 1)
newdata$survival = sm.coxph(formula = Surv(time) ~ x,
data = sjosmooth,
lambda = 0.3,
newdata = newdata,
type = "survival")
# plotting the true and estiamted survival functions.
ggplot() +
geom_line(data = newdata,   aes(y = survival,  x = x)) +
geom_line(data = sjosmooth, aes(y = survt1,  x = x), linetype = "dashed") +
scale_y_continuous(limits = c(0,1))
# perform the kernal smoothing for each of the lambdas
lambda = c(0.05, 0.3, 1, 10)
newdata = tibble(x = seq(0, 1, by = 0.05),
time = 1)
# output is a list, with each element the output for sm.coxph for each of the lambda values
est0 = map(lambda, ~ bind_cols(newdata,
survival = sm.coxph(formula = Surv(time) ~ x,
data = sjosmooth,
lambda = .x,
newdata = newdata,
type = "survival")))
# adding the lambda parameter to the list of tibble results
est.n = nrow(est0[[1]])
est = map2(est0, lambda, ~ bind_cols(.x, tibble(lambda = rep(.y, est.n)))) %>%
# appending the results into a single tibble
bind_rows(.)
# plotting results
ggplot() +
geom_line(data = est, aes(y = survival, x = x, color = as.factor(lambda))) +
geom_line(data = sjosmooth, aes(y = survt1,  x = x), linetype = "dashed") +
labs(color = expression(lambda)) +
scale_y_continuous(limits = c(0,1)) +
theme(legend.position = c(0.9, 0.81))
# generating predictor variables, x
n = 100
data.seq = seq(from = 0, to = 1, length.out = n)
set.seed(564)
sjosmooth.2d = complete(
tibble(x = data.seq,
y = data.seq),
x, y
)
# simulating the time to event outcome assuming a correct Cox model
sjosmooth.2d = mutate(sjosmooth.2d,
xb = 2*(x - 0.5)^2 + 2*(y - 0.5)^2,
time = -log(runif(n, 0, 1)) * exp(-xb),
# getting the true survival probabilites at time 1 using x
survt1 = exp(-exp(xb)))
# plotting true survival
true.surv = sjosmooth.2d %>%
select(x, y, xb) %>%
spread(y, xb) %>%
select(-x) %>%
plot_ly(z = ~ as.matrix(.),
x = data.seq,
y = data.seq) %>%
add_surface(showscale=FALSE) %>%
layout(title = "True Survival")
true.surv
# generating new data to perform estiamtion on
newdata.seq = seq(0.05, 0.95, length.out = 10)
newdata.2d = complete(
tibble(x = newdata.seq,
y = newdata.seq,
time = 1),
x, y, time
)
# calculating estimated survival
newdata.2d$pred.lp = sm.coxph(formula = Surv(time) ~ x + y,
data = sjosmooth.2d,
lambda = 1.2,
newdata = newdata.2d,
type = "lp")
# plotting the estimated survival
est.surv = newdata.2d %>%
select(x, y, pred.lp) %>%
spread(y, pred.lp) %>%
select(-x) %>%
plot_ly(z = ~ as.matrix(.),
x = newdata.seq,
y = newdata.seq) %>%
add_surface(showscale=FALSE)  %>%
layout(title = "Estimated Survival")
est.surv
available::available("dds")
?sm.coxph
librar(sjosmooth)
library(sjosmooth)
?sm.coxph
usethis::use_build_ignore("Archive Build 2018-11-18")
?usethis::use_build_ignore
usethis::create_package()
usethis::create_package(here::here())
usethis::use_build_ignore("Archive Build 2018-11-18/*")
library(sjosmooth)
usethis::use_r("utils-calculate_weights")
?dist
styler:::style_selection()
styler:::style_active_file()
usethis::use_package("dplyr")
usethis::use_mit_license()
options(usethis.full_name = "Daniel D. Sjoberg")
usethis::use_mit_license()
usethis::use_travis()
usethis::use_readme_rmd()
